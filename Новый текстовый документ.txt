models.py

from django.db import models
from django.contrib.auth.models import User
       
class Profile(models.Model):
    photo = models.ImageField(upload_to='images/profile', null=True,blank=True)
    user = models.OneToOneField(User, on_delete=models.CASCADE, null=True ,blank=True)
    def __str__(self):
        return self.user.username

class Lectures(models.Model):
    name = models.CharField(max_length=200)
    value = models.CharField(max_length=200,null=True ,blank=True)
    code = models.TextField(null=True ,blank=True)
    def __str__(self):
        return self.name

class Lectures_text(models.Model):
    lectures_id = models.ForeignKey(Lectures, on_delete=models.CASCADE, null=True)
    title = models.CharField(max_length=200)
    text = models.TextField(null=True ,blank=True)
    photo = models.ImageField(upload_to='images/lesson', blank=True)
    lectures_cod = models.TextField(null=True ,blank=True)
    def __str__(self):
        return self.title

class EnrollCource(models.Model):#Зарегистрироваться Курс
    lectures = models.ForeignKey(Lectures, on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    created = models.DateTimeField(auto_now=True)
    def __str__(self):
        return self.user.username

class QuestionOne(models.Model):
    text = models.CharField(max_length=200)

    def __str__(self):
        return self.text
        
    class Meta:
        verbose_name = 'Тестер қосу'
        verbose_name_plural = 'Тестер қосу'

class Choice(models.Model):
    question = models.ForeignKey(QuestionOne, on_delete=models.CASCADE)
    text = models.CharField(max_length=200)
    is_correct = models.BooleanField(default=False)
    
    class Meta:
        verbose_name = 'Тестің жауаптарын қосу'
        verbose_name_plural = 'Тестің жауаптарын қосу'

class Application(models.Model):
    name = models.CharField(max_length=200)
    text = models.TextField(null=True ,blank=True)


    def __str__(self):
        return self.name
        
    class Meta:
        verbose_name = 'техникалық көмек'
        verbose_name_plural = 'техникалық көмек'

admin.py
from django.contrib import admin
from .models import Profile,Lectures,Lectures_text,EnrollCource,QuestionOne,Choice

admin.site.register(Profile)
admin.site.register(Lectures)
admin.site.register(Lectures_text)
admin.site.register(EnrollCource)
admin.site.register(QuestionOne)
admin.site.register(Choice)

forms.py
from django import forms
from django.contrib.auth.models import User
from .models import Profile, Lectures, Lectures_text, Application


class UserRegistrationForm(forms.ModelForm):
    password = forms.CharField(label='Введите пароль', widget=forms.PasswordInput)
    password2 = forms.CharField(label='Подтвердите пароль', widget=forms.PasswordInput)

    class Meta:
        model = User
        fields = ('username', 'first_name', 'email')

    def clean_password2(self):
        cd = self.cleaned_data        
        if cd['password'] != cd['password2']:            
            raise forms.ValidationError('Passwords don\'t match.')        
        return cd['password2']


class ProfileForm(forms.ModelForm):

    class Meta:
        model = Profile
        fields = ['photo']

class LecturesForm(forms.ModelForm):

    class Meta:
        model = Lectures
        fields = ['name', 'value']

class LecturesTextForm(forms.ModelForm):

    class Meta:
        model = Lectures_text
        fields = ['lectures_id', 'title', 'text', 'photo']


class ApplicationForm(forms.ModelForm):

    class Meta:
        model = Application
        fields = ['name', 'text']

settings.py

"""
Django settings for platforma project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!pxaor%gc8e96py^og((3lza_0r9wx(#_h*zlmad&jaee4v8-2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

LOGIN_REDIRECT_URL = '/student'
LOGOUT_REDIRECT_URL = '/'
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'widget_tweaks',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'universystem',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'platforma.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'platforma.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')


urls.py

"""platforma URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from django.contrib.auth import views as auth_views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('universystem.urls')),
]
if settings.DEBUG:
	urlpatterns += static(settings.MEDIA_URL,
		                  document_root=settings.MEDIA_ROOT)